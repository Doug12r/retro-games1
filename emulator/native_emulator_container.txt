# =====================================================
# NATIVE EMULATOR CONTAINER WITH GPU PASSTHROUGH
# =====================================================

FROM ubuntu:22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV DISPLAY=:99
ENV PULSE_RUNTIME_PATH=/var/run/pulse

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Core emulation dependencies
    retroarch \
    libretro-* \
    \
    # GPU and display dependencies
    xvfb \
    x11vnc \
    fluxbox \
    mesa-utils \
    libgl1-mesa-dri \
    libglx-mesa0 \
    \
    # Audio dependencies
    pulseaudio \
    pulseaudio-utils \
    alsa-utils \
    \
    # Streaming dependencies
    ffmpeg \
    v4l2loopback-dkms \
    \
    # Network and utilities
    websockify \
    novnc \
    nginx \
    supervisor \
    curl \
    wget \
    unzip \
    \
    # Development tools
    build-essential \
    git \
    cmake \
    pkg-config \
    \
    # Python for automation scripts
    python3 \
    python3-pip \
    \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies for automation
RUN pip3 install \
    websockets \
    asyncio \
    psutil \
    pillow \
    numpy

# Create emulator user
RUN useradd -m -s /bin/bash emulator && \
    usermod -aG audio,video emulator

# Setup directories
RUN mkdir -p \
    /app/emulator \
    /app/roms \
    /app/bios \
    /app/saves \
    /app/screenshots \
    /app/config \
    /app/logs \
    /var/log/supervisor \
    /tmp/.X11-unix

# Install additional RetroArch cores
WORKDIR /tmp
RUN wget -O cores.zip https://buildbot.libretro.com/nightly/linux/x86_64/latest/RetroArch_cores.7z && \
    7z x cores.zip -o/usr/lib/libretro/ && \
    rm cores.zip

# Copy emulator automation scripts
COPY emulator-scripts/ /app/emulator/
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY nginx.conf /etc/nginx/nginx.conf
COPY retroarch.cfg /app/config/retroarch.cfg

# Setup RetroArch configuration
RUN mkdir -p /home/emulator/.config/retroarch && \
    cp /app/config/retroarch.cfg /home/emulator/.config/retroarch/ && \
    chown -R emulator:emulator /home/emulator/.config

# Setup NoVNC for web-based VNC access
RUN git clone https://github.com/novnc/noVNC.git /opt/novnc && \
    git clone https://github.com/novnc/websockify /opt/novnc/utils/websockify && \
    ln -s /opt/novnc/vnc.html /opt/novnc/index.html

# Create startup script
COPY <<EOF /app/emulator/start.sh
#!/bin/bash
set -e

# Start X server
echo "Starting X server..."
Xvfb :99 -screen 0 1920x1080x24 -ac -noreset &
export DISPLAY=:99

# Wait for X server
sleep 2

# Start window manager
echo "Starting window manager..."
fluxbox &

# Start PulseAudio
echo "Starting PulseAudio..."
pulseaudio --start --exit-idle-time=-1 &

# Start VNC server
echo "Starting VNC server..."
x11vnc -display :99 -nopw -listen localhost -xkb -ncache 10 -ncache_cr -forever -shared &

# Start websockify for NoVNC
echo "Starting websockify..."
/opt/novnc/utils/websockify/websockify.py --web /opt/novnc 6080 localhost:5900 &

# Start nginx for static files
echo "Starting nginx..."
nginx -g "daemon off;" &

# Start supervisor for process management
echo "Starting supervisor..."
exec supervisord -c /etc/supervisor/conf.d/supervisord.conf
EOF

# Create RetroArch automation script
COPY <<EOF /app/emulator/retroarch_controller.py
#!/usr/bin/env python3
"""
RetroArch Controller - Manages RetroArch instances via network commands
Provides WebSocket API for real-time control and monitoring
"""

import asyncio
import websockets
import json
import subprocess
import os
import signal
import psutil
import time
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RetroArchController:
    def __init__(self):
        self.process = None
        self.config_path = "/app/config/retroarch.cfg"
        self.save_path = "/app/saves"
        self.screenshot_path = "/app/screenshots"
        self.current_game = None
        self.current_core = None
        self.metrics = {
            "fps": 0,
            "frame_skip": 0,
            "audio_latency": 0,
            "cpu_usage": 0,
            "memory_usage": 0
        }
        
    async def start_game(self, rom_path: str, core: str, config: dict = None):
        """Start RetroArch with specified ROM and core"""
        try:
            if self.process and self.process.poll() is None:
                await self.stop_game()
                
            # Build RetroArch command
            cmd = [
                "retroarch",
                "-L", f"/usr/lib/libretro/{core}_libretro.so",
                "--config", self.config_path,
                "--save-path", self.save_path,
                "--savestate-path", self.save_path,
                "--screenshot-path", self.screenshot_path,
                "--verbose"
            ]
            
            # Add custom configuration
            if config:
                for key, value in config.items():
                    cmd.extend([f"--{key}", str(value)])
                    
            cmd.append(rom_path)
            
            # Start RetroArch process
            self.process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                env={**os.environ, "DISPLAY": ":99"}
            )
            
            self.current_game = rom_path
            self.current_core = core
            
            logger.info(f"Started RetroArch: {rom_path} with {core}")
            return {"success": True, "pid": self.process.pid}
            
        except Exception as e:
            logger.error(f"Failed to start game: {e}")
            return {"success": False, "error": str(e)}
    
    async def stop_game(self):
        """Stop current RetroArch instance"""
        try:
            if self.process and self.process.poll() is None:
                self.process.terminate()
                try:
                    self.process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    self.process.kill()
                    self.process.wait()
                    
            self.process = None
            self.current_game = None
            self.current_core = None
            
            logger.info("Stopped RetroArch")
            return {"success": True}
            
        except Exception as e:
            logger.error(f"Failed to stop game: {e}")
            return {"success": False, "error": str(e)}
    
    async def pause_game(self):
        """Pause current game"""
        try:
            if self.process and self.process.poll() is None:
                os.kill(self.process.pid, signal.SIGSTOP)
                return {"success": True, "status": "paused"}
            return {"success": False, "error": "No active game"}
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    async def resume_game(self):
        """Resume paused game"""
        try:
            if self.process and self.process.poll() is None:
                os.kill(self.process.pid, signal.SIGCONT)
                return {"success": True, "status": "running"}
            return {"success": False, "error": "No active game"}
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    async def save_state(self, slot: int = 0):
        """Create save state"""
        try:
            if not self.process or self.process.poll() is not None:
                return {"success": False, "error": "No active game"}
            
            # Send save state command via stdin (if supported)
            # This would need RetroArch network command interface
            save_file = f"{self.save_path}/{Path(self.current_game).stem}.state{slot}"
            
            # Alternative: Use RetroArch's network command interface
            # For now, simulate save state creation
            timestamp = time.time()
            save_info = {
                "slot": slot,
                "file": save_file,
                "timestamp": timestamp,
                "game": self.current_game,
                "core": self.current_core
            }
            
            return {"success": True, "save_state": save_info}
            
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    async def load_state(self, slot: int = 0):
        """Load save state"""
        try:
            if not self.process or self.process.poll() is not None:
                return {"success": False, "error": "No active game"}
            
            save_file = f"{self.save_path}/{Path(self.current_game).stem}.state{slot}"
            
            if not os.path.exists(save_file):
                return {"success": False, "error": "Save state not found"}
            
            # Load state logic would go here
            return {"success": True, "loaded_slot": slot}
            
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    async def get_metrics(self):
        """Get current performance metrics"""
        try:
            if self.process and self.process.poll() is None:
                # Get process metrics
                proc = psutil.Process(self.process.pid)
                cpu_percent = proc.cpu_percent()
                memory_info = proc.memory_info()
                
                self.metrics.update({
                    "cpu_usage": cpu_percent,
                    "memory_usage": memory_info.rss / 1024 / 1024,  # MB
                    "status": "running",
                    "pid": self.process.pid
                })
            else:
                self.metrics.update({
                    "status": "stopped",
                    "pid": None
                })
            
            return self.metrics
            
        except Exception as e:
            logger.error(f"Failed to get metrics: {e}")
            return self.metrics
    
    async def screenshot(self):
        """Take screenshot"""
        try:
            screenshot_file = f"{self.screenshot_path}/screenshot_{int(time.time())}.png"
            
            # Use imagemagick to capture screen
            subprocess.run([
                "import", "-window", "root", "-display", ":99", screenshot_file
            ], check=True)
            
            return {"success": True, "file": screenshot_file}
            
        except Exception as e:
            return {"success": False, "error": str(e)}

# WebSocket server for real-time control
class EmulatorWebSocketServer:
    def __init__(self):
        self.controller = RetroArchController()
        self.clients = set()
    
    async def register(self, websocket):
        self.clients.add(websocket)
        logger.info(f"Client connected: {websocket.remote_address}")
    
    async def unregister(self, websocket):
        self.clients.discard(websocket)
        logger.info(f"Client disconnected: {websocket.remote_address}")
    
    async def broadcast_metrics(self):
        """Broadcast metrics to all connected clients"""
        while True:
            try:
                metrics = await self.controller.get_metrics()
                message = json.dumps({
                    "type": "metrics",
                    "data": metrics,
                    "timestamp": time.time()
                })
                
                if self.clients:
                    await asyncio.gather(
                        *[client.send(message) for client in self.clients],
                        return_exceptions=True
                    )
                
                await asyncio.sleep(1)  # Update every second
                
            except Exception as e:
                logger.error(f"Error broadcasting metrics: {e}")
                await asyncio.sleep(5)
    
    async def handle_message(self, websocket, message):
        """Handle incoming WebSocket messages"""
        try:
            data = json.loads(message)
            command = data.get("command")
            params = data.get("params", {})
            
            response = {"command": command, "success": False}
            
            if command == "start_game":
                response.update(await self.controller.start_game(
                    params.get("rom_path"),
                    params.get("core"),
                    params.get("config", {})
                ))
            elif command == "stop_game":
                response.update(await self.controller.stop_game())
            elif command == "pause_game":
                response.update(await self.controller.pause_game())
            elif command == "resume_game":
                response.update(await self.controller.resume_game())
            elif command == "save_state":
                response.update(await self.controller.save_state(params.get("slot", 0)))
            elif command == "load_state":
                response.update(await self.controller.load_state(params.get("slot", 0)))
            elif command == "screenshot":
                response.update(await self.controller.screenshot())
            elif command == "get_metrics":
                response.update({"success": True, "metrics": await self.controller.get_metrics()})
            else:
                response["error"] = f"Unknown command: {command}"
            
            await websocket.send(json.dumps(response))
            
        except Exception as e:
            error_response = {
                "command": "error",
                "success": False,
                "error": str(e)
            }
            await websocket.send(json.dumps(error_response))
    
    async def handle_client(self, websocket, path):
        """Handle individual WebSocket client"""
        await self.register(websocket)
        try:
            async for message in websocket:
                await self.handle_message(websocket, message)
        except websockets.exceptions.ConnectionClosed:
            pass
        finally:
            await self.unregister(websocket)

# Main server startup
async def main():
    server = EmulatorWebSocketServer()
    
    # Start metrics broadcasting
    asyncio.create_task(server.broadcast_metrics())
    
    # Start WebSocket server
    logger.info("Starting EmulatorWebSocketServer on port 8765")
    await websockets.serve(server.handle_client, "0.0.0.0", 8765)
    
    # Keep running
    await asyncio.Future()

if __name__ == "__main__":
    asyncio.run(main())
EOF

# Create supervisor configuration
COPY <<EOF /etc/supervisor/conf.d/supervisord.conf
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:emulator-controller]
command=python3 /app/emulator/retroarch_controller.py
directory=/app/emulator
user=emulator
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/emulator-controller.err.log
stdout_logfile=/var/log/supervisor/emulator-controller.out.log

[program:nginx]
command=nginx -g "daemon off;"
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/nginx.err.log
stdout_logfile=/var/log/supervisor/nginx.out.log

[unix_http_server]
file=/tmp/supervisor.sock

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface
EOF

# Create nginx configuration for serving NoVNC and streaming
COPY <<EOF /etc/nginx/nginx.conf
user www-data;
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    
    # NoVNC web interface
    server {
        listen 80;
        server_name localhost;
        
        location / {
            root /opt/novnc;
            index index.html;
            try_files \$uri \$uri/ =404;
        }
        
        location /websockify {
            proxy_pass http://localhost:6080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade \$http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host \$host;
        }
        
        location /emulator-ws {
            proxy_pass http://localhost:8765;
            proxy_http_version 1.1;
            proxy_set_header Upgrade \$http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host \$host;
        }
        
        # Static file serving for ROMs, saves, etc.
        location /files/ {
            alias /app/;
            autoindex on;
        }
    }
}
EOF

# Create comprehensive RetroArch configuration
COPY <<EOF /app/config/retroarch.cfg
# RetroArch Configuration for Container Emulation

# Video settings
video_driver = "gl"
video_vsync = true
video_smooth = true
video_threaded = true
video_scale_integer = false
video_aspect_ratio_auto = true
video_rotation = 0
video_fullscreen = false
video_windowed_fullscreen = false
video_refresh_rate = 60.0

# Audio settings
audio_driver = "pulse"
audio_enable = true
audio_sync = true
audio_rate_control = true
audio_rate_control_delta = 0.005
audio_max_timing_skew = 0.05
audio_volume = 0.0
audio_mute_enable = false

# Input settings
input_driver = "x"
input_autodetect_enable = true
input_joypad_driver = "linuxraw"
input_keyboard_layout = ""

# Network settings
network_cmd_enable = true
network_cmd_port = 55355
network_remote_enable = true
network_remote_port = 55356

# Save settings
savestate_auto_save = false
savestate_auto_load = false
save_file_compression = true
savestate_file_compression = true

# Directory settings
system_directory = "/app/bios"
savefile_directory = "/app/saves"
savestate_directory = "/app/saves"
screenshot_directory = "/app/screenshots"
recording_output_directory = "/app/recordings"

# Logging
log_verbosity = true
perfcnt_enable = true

# Core options
core_options_path = "/app/config/retroarch-core-options.cfg"

# Performance
rewind_enable = false
slowmotion_ratio = 3.0
fastforward_ratio = 4.0
pause_nonactive = true
EOF

# Set permissions
RUN chmod +x /app/emulator/start.sh && \
    chmod +x /app/emulator/retroarch_controller.py && \
    chown -R emulator:emulator /app

# Expose ports
EXPOSE 80 5900 6080 8765

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Switch to emulator user for security
USER emulator
WORKDIR /app

# Start the emulator environment
CMD ["/app/emulator/start.sh"]

# Metadata
LABEL maintainer="RetroGame Team"
LABEL version="1.0.0"
LABEL description="Native emulator container with GPU acceleration and streaming support"
LABEL org.opencontainers.image.source="https://github.com/your-org/retro-game-backend"