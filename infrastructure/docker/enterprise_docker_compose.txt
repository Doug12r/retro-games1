version: '3.8'

services:
  # Frontend Service (Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      target: production
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: retrogame/frontend:latest
    container_name: retro-game-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${FRONTEND_API_URL:-/api}
      - REACT_APP_WS_URL=${FRONTEND_WS_URL:-/ws}
    networks:
      - retrogame-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    user: "1001:1001"

  # Backend API Service (Enhanced)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: retrogame/backend:latest
    container_name: retro-game-backend
    restart: unless-stopped
    environment:
      # Core Configuration
      - NODE_ENV=production
      - PORT=8080
      - HOST=0.0.0.0
      
      # Database Configuration
      - DATABASE_URL=postgresql://retrogame:${DB_PASSWORD}@postgres:5432/retrogame
      
      # Redis Configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      
      # Storage Configuration
      - UPLOAD_DIR=/opt/retrogame/uploads
      - ROM_DIR=/opt/retrogame/roms
      - MEDIA_DIR=/opt/retrogame/media
      - BIOS_DIR=/opt/retrogame/bios
      - TEMP_DIR=/opt/retrogame/temp
      
      # Security Configuration
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-1000}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-15}
      
      # Upload Configuration
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-4294967296}
      - CHUNK_SIZE=${CHUNK_SIZE:-1048576}
      - UPLOAD_TIMEOUT=${UPLOAD_TIMEOUT:-3600}
      
      # API Keys
      - IGDB_CLIENT_ID=${IGDB_CLIENT_ID:-}
      - IGDB_CLIENT_SECRET=${IGDB_CLIENT_SECRET:-}
      - THEGAMESDB_API_KEY=${THEGAMESDB_API_KEY:-}
      
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENABLE_METRICS=true
      - METRICS_PORT=9464
    volumes:
      - roms_data:/opt/retrogame/roms:ro
      - uploads_data:/opt/retrogame/uploads
      - saves_data:/opt/retrogame/saves
      - bios_data:/opt/retrogame/bios:ro
      - media_data:/opt/retrogame/media
      - temp_data:/opt/retrogame/temp
    networks:
      - retrogame-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    user: "1001:1001"

  # Emulator Service
  emulator-service:
    build:
      context: ./emulator
      dockerfile: Dockerfile
    image: retrogame/emulator:latest
    container_name: retro-game-emulator
    restart: unless-stopped
    environment:
      - DISPLAY=:99
      - VNC_PASSWORD=${VNC_PASSWORD}
      - PULSE_RUNTIME_PATH=/var/run/pulse
    volumes:
      - roms_data:/opt/retrogame/roms:ro
      - saves_data:/opt/retrogame/saves
      - bios_data:/opt/retrogame/bios:ro
      - retroarch_config:/opt/retrogame/config
      - /dev/shm:/dev/shm
    networks:
      - retrogame-network
    devices:
      - /dev/dri:/dev/dri
    cap_add:
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    depends_on:
      - backend

  # PostgreSQL Database (Enhanced)
  postgres:
    image: postgres:15-alpine
    container_name: retro-game-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=retrogame
      - POSTGRES_USER=retrogame
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - retrogame-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U retrogame -d retrogame"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_READ_SEARCH
    user: "999:999"

  # Redis Cache (Enhanced)
  redis:
    image: redis:7-alpine
    container_name: retro-game-redis
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --tcp-backlog 128
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - retrogame-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "999:999"

  # Caddy Reverse Proxy with Automatic HTTPS
  caddy:
    image: caddy:2-alpine
    container_name: retro-game-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"  # HTTP/3 support
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    networks:
      - retrogame-network
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@localhost}
      - GRAFANA_PASSWORD_HASH=${GRAFANA_PASSWORD_HASH}
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "caddy", "validate", "/etc/caddy/Caddyfile"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: retro-game-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.wal-compression'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    networks:
      - retrogame-network
    depends_on:
      - node-exporter
      - cadvisor
      - postgres-exporter
      - redis-exporter
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: retro-game-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_SNAPSHOTS_EXTERNAL_ENABLED=false
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - retrogame-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    user: "472:472"

  # AlertManager for Notifications
  alertmanager:
    image: prom/alertmanager:latest
    container_name: retro-game-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager:ro
      - alertmanager_data:/alertmanager
    networks:
      - retrogame-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: retro-game-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - retrogame-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"

  # cAdvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: retro-game-cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - retrogame-network
    command:
      - '--housekeeping_interval=10s'
      - '--docker_only=true'
      - '--disable_metrics=disk,network,tcp,udp,percpu,sched,process'
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: retro-game-postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://retrogame:${DB_PASSWORD}@postgres:5432/retrogame?sslmode=disable
    networks:
      - retrogame-network
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: retro-game-redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - retrogame-network
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # Elasticsearch for Centralized Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: retro-game-elasticsearch
    restart: unless-stopped
    environment:
      - node.name=elasticsearch
      - cluster.name=retrogame-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - retrogame-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: retro-game-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - caddy_logs:/var/log/caddy:ro
    networks:
      - retrogame-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - "LS_JAVA_OPTS=-Xms512m -Xmx512m"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: retro-game-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${KIBANA_ENCRYPTION_KEY}
    networks:
      - retrogame-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

# Volumes for Persistent Data
volumes:
  # Database volumes
  postgres_data:
    driver: local
  redis_data:
    driver: local

  # Application data volumes
  roms_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/retrogame/roms
  uploads_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/retrogame/uploads
  saves_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/retrogame/saves
  bios_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/retrogame/bios
  media_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/retrogame/media
  temp_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/retrogame/temp
  retroarch_config:
    driver: local

  # Reverse proxy volumes
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  caddy_logs:
    driver: local

  # Monitoring volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

  # Logging volumes
  elasticsearch_data:
    driver: local

# Networks
networks:
  retrogame-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: retrogame0
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    labels:
      - "com.retrogame.description=Main application network"